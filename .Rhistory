## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(i)
i
}
B = matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
cacheSolve(B)
cacheSolve()
cacheSolve(B)
makeCacheMatrix(B)
cacheSolve(B)
makeCacheMatrix(B)
cacheSolve(B)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(B)
cacheSolve(B)
B = matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
cacheSolve(B)
B = matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
makeCacheMatrix(B)
cacheSolve(B)
makeCacheMatrix()
cacheSolve()
x = makeCacheMatrix()
cacheSolve(x)
x = makeCacheMatrix(B)
cacheSolve(x)
B = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(B)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test <- function(){
B = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(B)
cacheSolve(x)
test()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test <- function(){
B = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(B)
print(cacheSolve(x))
}
test()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test <- function(){
B = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(B)
res = cacheSolve(x)
print(res)
}
test()
test
B = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(B)
cacheSolve(x)
cacheSolve(x)
B = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(B)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("hit cache")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test <- function(){
mat = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(mat)
res = cacheSolve(x)
}
test()
mean(2,4)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("hit cache")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test <- function(){
mat = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(mat)
res = cacheSolve(x)
}
test()
x = test()
print(x)
mat = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
print(mat)
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
matrix(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("hit cache")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
test <- function(){
mat = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(mat)
res = cacheSolve(x)
}
mat = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(mat)
cacheSolve(x)
x = makeCacheMatrix(mat)
cacheSolve(x)
mat = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(mat)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("hit cache")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
mat = matrix(
c(2, 4, 1, 5),
nrow=2,
ncol=2)
x = makeCacheMatrix(mat)
cacheSolve(x)
